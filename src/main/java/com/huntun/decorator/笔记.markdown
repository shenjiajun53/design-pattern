### 原理：
装饰类和被装饰类继承同一个接口

### 跟普通静态代理区别
跟静态代理最大区别就是职责不同

静态代理不一定要满足 is-a 的关系

静态代理会做功能增强， 同一个职责变得不一样

装饰器更多考虑是扩展



| | 装饰者模式 | 适配器模式 | 
| ------ | ------ | ------ |
| 形式 | 是一种非常特别的适配器模式 | 没有层级关系，装饰器模式有层级关系 |
| 定义 | 装饰者和被装饰者都实现同一个接口,主要目的是为了扩展之后依旧保留 OOP 关系  |适配器和被适配者没有必然的联系，通常是采用继承或代理的形式进行包装 |
| 关系 | 满足 is-a 的关系 | 满足 has-a 的关系 |
| 功能 | 注重覆盖、扩展 | 注重兼容、转换 |
| 设计 | 前置考虑 | 后置考虑 |



### 优点：
1、装饰者是继承的有力补充，比继承灵活，不改变原有对象的情况下动态地给一个对象

扩展功能，即插即用。

2、通过使用不同装饰类以及这些装饰类的排列组合，可以实现不同效果。

3、装饰者完全遵守开闭原则。

### 缺点：
1、会出现更多的代码，更多的类，增加程序复杂性。

2、动态装饰时，多层装饰时会更复杂。
那么装饰者模式我们就讲解到这里，希望小伙伴们认真体会，加深理解